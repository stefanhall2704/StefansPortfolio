name: Deploy to Raspberry Pi

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log into Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/arm64 -t ${{ secrets.DOCKERHUB_USERNAME }}/stefanportfolio:latest --push .

  deploy:
    name: Deploy Portfolio
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Create SSH directory and add private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa  # Removes potential Windows line endings
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts  # Adds host to known_hosts to prevent prompt
          ls -lah ~/.ssh  # Debugging: Verify SSH key exists
          cat ~/.ssh/id_rsa | wc -l  # Debugging: Check key length
        shell: bash
      - name: Deploy to Raspberry Pi
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -v ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e  # Exit on error to prevent partial failures

            echo "Pulling latest docker image..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/stefanportfolio:latest

            # Check if a container is currently running and find its port
            CURRENT_PORT=$(docker ps --filter "name=portfolio" --format "{{.Ports}}" | grep -oE ':[0-9]+' | cut -d: -f2 || echo "3000")

            echo "Current running port: $CURRENT_PORT"

            # Dynamically determine new port and container name
            if [[ "$CURRENT_PORT" == "3000" ]]; then
              NEW_PORT="3001"
              NEW_CONTAINER="portfolio_blue"
            else
              NEW_PORT="3000"
              NEW_CONTAINER="portfolio_green"
            fi

            echo "Deploying new container: $NEW_CONTAINER on port: $NEW_PORT"

            # Ensure no leftover 'portfolio_blue' or 'portfolio_green' containers exist
            if docker ps -a --format '{{.Names}}' | grep -q "^$NEW_CONTAINER$"; then
              echo "Removing old $NEW_CONTAINER container..."
              docker stop $NEW_CONTAINER || true
              docker rm $NEW_CONTAINER || true
            fi

            # Run new container on alternate port
            docker run -d --restart unless-stopped --name $NEW_CONTAINER -p $NEW_PORT:3000 ${{ secrets.DOCKERHUB_USERNAME }}/stefanportfolio:latest

            echo "Waiting for new container ($NEW_CONTAINER) to be healthy..."
            sleep 5  # Give it time to start

            if ! docker ps | grep $NEW_CONTAINER; then
              echo "❌ New container failed to start!"
              exit 1
            fi

            echo "New container is running on port $NEW_PORT. Swapping traffic..."

            # Stop and remove the old container properly
            if docker ps | grep "portfolio"; then
              echo "Stopping and removing the old portfolio container..."
              docker stop portfolio || true
              docker rm portfolio || true
            fi

            # Rename the new container to "portfolio"
            docker rename $NEW_CONTAINER portfolio

            echo "Final cleanup: Removing unused images..."
            docker image prune -af

            echo "Deployment complete! ✅"
          EOF

