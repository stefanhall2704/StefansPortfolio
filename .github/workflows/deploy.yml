name: Deploy to Raspberry Pi

on:
  push:
    branches:
      - main

jobs:
  # build:
  #   name: Build and Push Docker Image
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #
  #     - name: Log into Docker Hub
  #       run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
  #
  #     - name: Build and Push Docker Image
  #       run: |
  #         docker buildx create --use
  #         docker buildx build --platform linux/arm64 -t ${{ secrets.DOCKERHUB_USERNAME }}/stefanportfolio:latest --push .

  deploy:
    name: Deploy Portfolio
    # needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Create SSH directory and add private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa  # Removes potential Windows line endings
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts  # Adds host to known_hosts to prevent prompt
          ls -lah ~/.ssh  # Debugging: Verify SSH key exists
          cat ~/.ssh/id_rsa | wc -l  # Debugging: Check key length
        shell: bash
- name: Deploy to Raspberry Pi
  run: |
    ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -v ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
      set -e  # Exit on error to prevent partial failures

      echo "Pulling latest docker image..."
      # docker pull ${{ secrets.DOCKERHUB_USERNAME }}/stefanportfolio:latest

      # Determine the current running container's port
      CURRENT_PORT=$(docker ps --filter "name=portfolio" --format "{{.Ports}}" | grep -oE ':[0-9]+' | cut -d: -f2 || echo "3000")

      if [[ -z "$CURRENT_PORT" ]]; then
        echo "No existing container found. Defaulting to port 3000."
        CURRENT_PORT="3000"
      fi

      if [[ "$CURRENT_PORT" == "3000" ]]; then
        NEW_PORT="3001"
        OLD_PORT="3000"
      else
        NEW_PORT="3000"
        OLD_PORT="3001"
      fi

      echo "Current running port: $CURRENT_PORT"
      echo "Deploying new container on port: $NEW_PORT"

      # Run new container on the alternate port
      docker run -d --restart unless-stopped --name portfolio_new -p $NEW_PORT:3000 ${{ secrets.DOCKERHUB_USERNAME }}/stefanportfolio:latest

      echo "Waiting for new container to be healthy..."
      sleep 5  # Give it time to start

      if ! docker ps | grep portfolio_new; then
        echo "❌ New container failed to start!"
        exit 1
      fi

      echo "New container is running! Swapping containers..."

      # Stop and remove the old container
      docker stop portfolio || true
      docker rm portfolio || true

      # Rename the new container to become the main one
      docker rename portfolio_new portfolio

      echo "Cleaning up old Docker resources..."
      docker system prune -f --volumes  # Cleans up volumes too

      echo "Deployment complete! ✅"
    EOF
